{"version":3,"file":"static/js/80.47e602f6.chunk.js","mappings":"gMA6BA,SAASA,EAAYC,EAASC,EAAOC,EAAaC,GAEhDF,EAAME,MAAQA,CAChB,CAOA,IAiFA,EAjF6B,SAAHC,GAAiC,IAA3BC,EAASD,EAATC,UAAWC,EAAQF,EAARE,SA4EzC,OA3EAC,EAAAA,EAAAA,YAAU,WAsER,OArE6B,WAC3B,IAAMP,EAAUQ,SAASC,cAAc,OAADC,OAAQL,IAC9C,GAAIL,EAAS,CACX,IAAMW,EAASX,EAAQY,iBAAiB,oBAADF,OACjBJ,EAAQ,OAE9BK,EAAOE,SAAQ,SAAAZ,GACb,GAAKA,IAASA,EAAMa,aAAa,kBAAjC,CAEA,IAAIZ,EAAcD,EAAMQ,cAAc,WAEhCM,GADNb,EAAcA,GAAeF,EAAQS,cAAc,YACpBK,aAAa,kBAC5C,IAAKC,EACH,OAAOC,QAAQC,IAAI,uCAADP,OACuBL,IAG3C,IAAMa,EAjDhB,SAAyBH,GAEvB,MAAO,CACLI,IAAKJ,EACLK,SAAU,CACR,CAAED,IAAK,IAAKE,KAAM,SAAUlB,MAAO,IACnC,CAAEgB,IAAK,IAAKE,KAAM,SAAUlB,MAAO,IAErCmB,UAAW,CAAC,KAEhB,CAuCmCC,CAAgBR,GAGzC,IAA+B,IAA3BG,EAAiBM,MACnB,OAAOR,QAAQC,IAAI,yEAADP,OACyDL,IAG7E,IAAMoB,EAAoB,WACxB1B,EACEC,EACAC,EACAC,EAlCL,GAqCC,EAEAwB,MAAMC,UAAUd,QAAQe,KACtB5B,EAAQY,iBAAiB,aACzB,SAAAX,GACEA,EAAM4B,iBAAiB,QAASJ,EAClC,IAGFd,EAAOE,SAAQ,SAAAZ,GACbA,EAAM4B,iBAAiB,SAAUJ,EACnC,IAEAC,MAAMC,UAAUd,QAAQe,KACtB5B,EAAQY,iBAAiB,0BACzB,SAAAkB,GACEA,EAAID,iBAAiB,QAASJ,EAChC,IAGFC,MAAMC,UAAUd,QAAQe,KACtB5B,EAAQY,iBAAiB,aACzB,SAAAmB,GACE,CAAC,QAAS,QAAS,UAAUlB,SAAQ,SAAAmB,GACnCD,EAAMF,iBAAiBG,EAAOP,EAChC,GACF,IAGF1B,EAAYC,EAASC,EAAOC,EAlE7B,IAmECD,EAAMgC,aAAa,iBAAkB,IAvDqB,CAwD5D,GACF,CACF,CAEAC,GAEO,WACL,CAEJ,GAAG,CAAC7B,EAAWC,IAER,IACT,E,SCtGA,EAXuB,WACnB,OAEA6B,EAAAA,EAAAA,KAAA,OAAAC,UAEED,EAAAA,EAAAA,KAACE,EAAoB,CAAChC,UAAU,MAAMC,SAAS,SAIrD,C","sources":["components/pages/CalculatorPage/InitializeCalculator.js","components/pages/CalculatorPage/CalculatorPage.js"],"sourcesContent":["import  { useEffect } from 'react';\n// import {\n//   parseExpression,\n//   cashOperandsFields,\n//   cutAndHideFieldsValues,\n//   changeValue,\n//   calcValue,\n// } from './helpers';\n\nfunction parseExpression(expression) {\n  // Повертаємо фіксовані дані для тестування\n  return {\n    str: expression,\n    operands: [\n      { str: 'a', type: 'number', value: 10 },\n      { str: 'b', type: 'number', value: 5 },\n    ],\n    operators: ['+'],\n  };\n}\n\nfunction cashOperandsFields(section, expression) {\n  // Нічого не робимо зі сталими значеннями\n}\n\nfunction cutAndHideFieldsValues(expression) {\n  // Нічого не робимо зі сталими значеннями\n}\n\nfunction changeValue(section, input, calcElement, value) {\n  // Встановлюємо стале значення для тестування\n  input.value = value;\n}\n\nfunction calcValue(expression) {\n  // Повертаємо фіксоване значення для тестування\n  return 15;\n}\n\nconst InitializeCalculator = ({ sectionId, inputLid }) => {\n  useEffect(() => {\n    const initializeCalculator = () => {\n      const section = document.querySelector(`#rec${sectionId}`);\n      if (section) {\n        const inputs = section.querySelectorAll(\n          `[data-input-lid=\"${inputLid}\"]`\n        );\n        inputs.forEach(input => {\n          if (!input || input.getAttribute('data-init-calc')) return;\n\n          let calcElement = input.querySelector('.t-calc');\n          calcElement = calcElement || section.querySelector('.t-calc');\n          const expression = calcElement.getAttribute('data-calc-expr');\n          if (!expression)\n            return console.log(\n              `Error: formula field is empty in rec${sectionId}`\n            );\n\n          const parsedExpression = parseExpression(expression);\n          cashOperandsFields(section, parsedExpression);\n          cutAndHideFieldsValues(parsedExpression);\n          if (parsedExpression.error === true)\n            return console.log(\n              `Please check math expression or input names (especially spaces) in rec${sectionId}`\n            );\n\n          const handleInputChange = () => {\n            changeValue(\n              section,\n              input,\n              calcElement,\n              calcValue(parsedExpression)\n            );\n          };\n\n          Array.prototype.forEach.call(\n            section.querySelectorAll('.t-input'),\n            input => {\n              input.addEventListener('input', handleInputChange);\n            }\n          );\n\n          inputs.forEach(input => {\n            input.addEventListener('change', handleInputChange);\n          });\n\n          Array.prototype.forEach.call(\n            section.querySelectorAll('.t-inputquantity__btn'),\n            btn => {\n              btn.addEventListener('click', handleInputChange);\n            }\n          );\n\n          Array.prototype.forEach.call(\n            section.querySelectorAll('.t-range'),\n            range => {\n              ['click', 'input', 'change'].forEach(event => {\n                range.addEventListener(event, handleInputChange);\n              });\n            }\n          );\n\n          changeValue(section, input, calcElement, calcValue(parsedExpression));\n          input.setAttribute('data-init-calc', 'y');\n        });\n      }\n    };\n\n    initializeCalculator();\n\n    return () => {\n      // Cleanup function if needed\n    };\n  }, [sectionId, inputLid]);\n\n  return null; // Since this component is for side effects only\n};\n\n// Other helper functions\n\nexport default InitializeCalculator;\n ","import React from 'react';\nimport InitializeCalculator from './InitializeCalculator';\n\nconst CalculatorPage = () => {\n    return (\n     \n    <div>      \n      {/* Передача значень sectionId і inputLid */}\n      <InitializeCalculator sectionId=\"123\" inputLid=\"456\" />\n      {/* Інші елементи вашої сторінки */}\n    </div>\n  );\n};\n\nexport default CalculatorPage;\n"],"names":["changeValue","section","input","calcElement","value","_ref","sectionId","inputLid","useEffect","document","querySelector","concat","inputs","querySelectorAll","forEach","getAttribute","expression","console","log","parsedExpression","str","operands","type","operators","parseExpression","error","handleInputChange","Array","prototype","call","addEventListener","btn","range","event","setAttribute","initializeCalculator","_jsx","children","InitializeCalculator"],"sourceRoot":""}